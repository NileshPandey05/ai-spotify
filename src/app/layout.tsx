import type { Metadata } from "next";
import { StackProvider, StackTheme } from "@stackframe/stack";
import { stackServerApp } from "../stack";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import AuthProvider from "@/components/AuthProvider";
import { cookies } from 'next/headers'
import {jwtDecode} from 'jwt-decode'

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type TokenPayload = {
  id: string
  email: string
  username?: string
}

type AuthProviderProps = {
  children: React.ReactNode;
  initialUser: { id: string; email: string; username: string } | null;
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const token = cookieStore.get('token')?.value;

  let user = null
  if (token) {
    try {
      const decoded = jwtDecode<TokenPayload>(token)
      user = {
        id: decoded.id,
        email: decoded.email,
        username: decoded.username || decoded.email.split('@')[0],
      }
    } catch (err) {
      console.error('Error decoding token:', err)
    }
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-zinc-950 text-white dark:bg-white` }
      ><StackProvider app={stackServerApp}><StackTheme>
        <AuthProvider initialUser={user}>
        {children}
        </AuthProvider>
      </StackTheme></StackProvider></body>
    </html>
  );
}
